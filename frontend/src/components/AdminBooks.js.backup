import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import '../styles/AdminBooks.css';

const AdminBooks = () => {
    const { user } = useContext(AuthContext);
    const navigate = useNavigate();
    const [books, setBooks] = useState([]);
    const [categories, setCategories] = useState([]);
    const [publishers, setPublishers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [showAddModal, setShowAddModal] = useState(false);
    const [showEditModal, setShowEditModal] = useState(false);
    const [selectedBook, setSelectedBook] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [currentPage, setCurrentPage] = useState(1);
    const booksPerPage = 10;

    const [bookForm, setBookForm] = useState({
        judul: '',
        pengarang: '',
        kategori_id: '',
        penerbit_id: '',
        tahun_terbit: '',
        jumlah_halaman: '',
        jumlah_buku: ''
    });

    useEffect(() => {
        fetchBooks();
        fetchCategories();
        fetchPublishers();
    }, []);

    const fetchBooks = async () => {
        try {
            const response = await axios.get('http://127.0.0.1:8000/api/books', {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            });
            
            // Pastikan response.data adalah array
            if (response.data && response.data.success) {
                setBooks(Array.isArray(response.data.data) ? response.data.data : []);
            } else if (Array.isArray(response.data)) {
                setBooks(response.data);
            } else {
                setBooks([]);
            }
        } catch (error) {
            console.error('Error fetching books:', error);
            setBooks([]); // Set empty array if error
        } finally {
            setLoading(false);
        }
    };

    const fetchCategories = async () => {
        try {
            const response = await axios.get('http://127.0.0.1:8000/api/categories', {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            });
            
            if (response.data && response.data.success) {
                setCategories(Array.isArray(response.data.data) ? response.data.data : []);
            } else if (Array.isArray(response.data)) {
                setCategories(response.data);
            } else {
                setCategories([]);
            }
        } catch (error) {
            console.error('Error fetching categories:', error);
            setCategories([]);
        }
    };

    const fetchPublishers = async () => {
        try {
            const response = await axios.get('http://127.0.0.1:8000/api/publishers', {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            });
            
            if (response.data && response.data.success) {
                setPublishers(Array.isArray(response.data.data) ? response.data.data : []);
            } else if (Array.isArray(response.data)) {
                setPublishers(response.data);
            } else {
                setPublishers([]);
            }
        } catch (error) {
            console.error('Error fetching publishers:', error);
            setPublishers([]);
        }
    };

    const handleInputChange = (e) => {
        setBookForm({
            ...bookForm,
            [e.target.name]: e.target.value
        });
    };

    const handleAddBook = async (e) => {
        e.preventDefault();
        try {
            await axios.post(`${process.env.REACT_APP_API_URL}/api/books`, bookForm, {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            });
            alert('Buku berhasil ditambahkan!');
            setShowAddModal(false);
            setBookForm({
                judul: '',
                pengarang: '',
                kategori_id: '',
                penerbit_id: '',
                tahun_terbit: '',
                jumlah_halaman: '',
                jumlah_buku: ''
            });
            fetchBooks();
        } catch (error) {
            console.error('Error adding book:', error);
            alert('Gagal menambahkan buku.');
        }
    };

    const handleEditBook = async (e) => {
        e.preventDefault();
        try {
            await axios.put(`${process.env.REACT_APP_API_URL}/api/books/${selectedBook.id}`, bookForm, {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                }
            });
            alert('Buku berhasil diperbarui!');
            setShowEditModal(false);
            setSelectedBook(null);
            fetchBooks();
        } catch (error) {
            console.error('Error updating book:', error);
            alert('Gagal memperbarui buku.');
        }
    };

    const handleDeleteBook = async (bookId) => {
        if (window.confirm('Apakah Anda yakin ingin menghapus buku ini?')) {
            try {
                await axios.delete(`${process.env.REACT_APP_API_URL}/api/books/${bookId}`, {
                    headers: {
                        Authorization: `Bearer ${localStorage.getItem('token')}`
                    }
                });
                alert('Buku berhasil dihapus!');
                fetchBooks();
            } catch (error) {
                console.error('Error deleting book:', error);
                alert('Gagal menghapus buku.');
            }
        }
    };

    const openEditModal = (book) => {
        setSelectedBook(book);
        setBookForm({
            judul: book.judul,
            pengarang: book.pengarang,
            kategori_id: book.kategori_id,
            penerbit_id: book.penerbit_id,
            tahun_terbit: book.tahun_terbit,
            jumlah_halaman: book.jumlah_halaman,
            jumlah_buku: book.jumlah_buku
        });
        setShowEditModal(true);
    };

    // Filter books
    const filteredBooks = books.filter(book =>
        book.judul.toLowerCase().includes(searchTerm.toLowerCase()) ||
        book.pengarang.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // Pagination
    const indexOfLastBook = currentPage * booksPerPage;
    const indexOfFirstBook = indexOfLastBook - booksPerPage;
    const currentBooks = filteredBooks.slice(indexOfFirstBook, indexOfLastBook);
    const totalPages = Math.ceil(filteredBooks.length / booksPerPage);

    if (loading) {
        return (
            <div className="admin-books-container">
                <div className="loading">Memuat data buku...</div>
            </div>
        );
    }

    return (
        <div className="admin-books-container">
            <div className="admin-books-header">
                <div className="header-left">
                    <h1>üìö Manajemen Buku</h1>
                    <p>Kelola koleksi buku perpustakaan</p>
                </div>
                <div className="header-right">
                    <span className="user-info">
                        Admin: {user?.fullname}
                    </span>
                    <button 
                        className="back-btn"
                        onClick={() => navigate('/dashboard')}
                    >
                        ‚Üê Kembali ke Dashboard
                    </button>
                </div>
            </div>

            <div className="admin-books-controls">
                <div className="search-section">
                    <input
                        type="text"
                        placeholder="Cari buku berdasarkan judul atau pengarang..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="search-input"
                    />
                </div>
                <div className="action-buttons">
                    <button 
                        className="add-btn"
                        onClick={() => setShowAddModal(true)}
                    >
                        ‚ûï Tambah Buku Baru
                    </button>
                </div>
            </div>

            <div className="books-table-container">
                <table className="books-table">
                    <thead>
                        <tr>
                            <th>No</th>
                            <th>Judul Buku</th>
                            <th>Pengarang</th>
                            <th>Kategori</th>
                            <th>Penerbit</th>
                            <th>Tahun</th>
                            <th>Stok</th>
                            <th>Aksi</th>
                        </tr>
                    </thead>
                    <tbody>
                        {currentBooks.map((book, index) => (
                            <tr key={book.id}>
                                <td>{indexOfFirstBook + index + 1}</td>
                                <td className="book-title">{book.judul}</td>
                                <td>{book.pengarang}</td>
                                <td>{book.category?.kategori}</td>
                                <td>{book.publisher?.nama_penerbit}</td>
                                <td>{book.tahun_terbit}</td>
                                <td>
                                    <span className={`stock-badge ${book.jumlah_buku > 0 ? 'available' : 'empty'}`}>
                                        {book.jumlah_buku}
                                    </span>
                                </td>
                                <td>
                                    <div className="action-buttons">
                                        <button 
                                            className="edit-btn"
                                            onClick={() => openEditModal(book)}
                                        >
                                            ‚úèÔ∏è
                                        </button>
                                        <button 
                                            className="delete-btn"
                                            onClick={() => handleDeleteBook(book.id)}
                                        >
                                            üóëÔ∏è
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>

            {totalPages > 1 && (
                <div className="pagination">
                    <button 
                        className={`page-btn ${currentPage === 1 ? 'disabled' : ''}`}
                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                        disabled={currentPage === 1}
                    >
                        ‚Üê Sebelumnya
                    </button>
                    
                    <span className="page-info">
                        Halaman {currentPage} dari {totalPages}
                    </span>
                    
                    <button 
                        className={`page-btn ${currentPage === totalPages ? 'disabled' : ''}`}
                        onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                        disabled={currentPage === totalPages}
                    >
                        Selanjutnya ‚Üí
                    </button>
                </div>
            )}

            {/* Add Book Modal */}
            {showAddModal && (
                <div className="modal-overlay">
                    <div className="modal">
                        <div className="modal-header">
                            <h2>Tambah Buku Baru</h2>
                            <button 
                                className="close-btn"
                                onClick={() => setShowAddModal(false)}
                            >
                                ‚úñÔ∏è
                            </button>
                        </div>
                        <form onSubmit={handleAddBook} className="book-form">
                            <div className="form-group">
                                <label>Judul Buku</label>
                                <input
                                    type="text"
                                    name="judul"
                                    value={bookForm.judul}
                                    onChange={handleInputChange}
                                    required
                                />
                            </div>
                            <div className="form-group">
                                <label>Pengarang</label>
                                <input
                                    type="text"
                                    name="pengarang"
                                    value={bookForm.pengarang}
                                    onChange={handleInputChange}
                                    required
                                />
                            </div>
                            <div className="form-row">
                                <div className="form-group">
                                    <label>Kategori</label>
                                    <select
                                        name="kategori_id"
                                        value={bookForm.kategori_id}
                                        onChange={handleInputChange}
                                        required
                                    >
                                        <option value="">Pilih Kategori</option>
                                        {categories.map(category => (
                                            <option key={category.id} value={category.id}>
                                                {category.kategori}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                                <div className="form-group">
                                    <label>Penerbit</label>
                                    <select
                                        name="penerbit_id"
                                        value={bookForm.penerbit_id}
                                        onChange={handleInputChange}
                                        required
                                    >
                                        <option value="">Pilih Penerbit</option>
                                        {publishers.map(publisher => (
                                            <option key={publisher.id} value={publisher.id}>
                                                {publisher.nama_penerbit}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                            </div>
                            <div className="form-row">
                                <div className="form-group">
                                    <label>Tahun Terbit</label>
                                    <input
                                        type="number"
                                        name="tahun_terbit"
                                        value={bookForm.tahun_terbit}
                                        onChange={handleInputChange}
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label>Jumlah Halaman</label>
                                    <input
                                        type="number"
                                        name="jumlah_halaman"
                                        value={bookForm.jumlah_halaman}
                                        onChange={handleInputChange}
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label>Stok Buku</label>
                                    <input
                                        type="number"
                                        name="jumlah_buku"
                                        value={bookForm.jumlah_buku}
                                        onChange={handleInputChange}
                                        required
                                    />
                                </div>
                            </div>
                            <div className="form-actions">
                                <button type="button" className="cancel-btn" onClick={() => setShowAddModal(false)}>
                                    Batal
                                </button>
                                <button type="submit" className="submit-btn">
                                    Tambah Buku
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}

            {/* Edit Book Modal */}
            {showEditModal && (
                <div className="modal-overlay">
                    <div className="modal">
                        <div className="modal-header">
                            <h2>Edit Buku</h2>
                            <button 
                                className="close-btn"
                                onClick={() => setShowEditModal(false)}
                            >
                                ‚úñÔ∏è
                            </button>
                        </div>
                        <form onSubmit={handleEditBook} className="book-form">
                            <div className="form-group">
                                <label>Judul Buku</label>
                                <input
                                    type="text"
                                    name="judul"
                                    value={bookForm.judul}
                                    onChange={handleInputChange}
                                    required
                                />
                            </div>
                            <div className="form-group">
                                <label>Pengarang</label>
                                <input
                                    type="text"
                                    name="pengarang"
                                    value={bookForm.pengarang}
                                    onChange={handleInputChange}
                                    required
                                />
                            </div>
                            <div className="form-row">
                                <div className="form-group">
                                    <label>Kategori</label>
                                    <select
                                        name="kategori_id"
                                        value={bookForm.kategori_id}
                                        onChange={handleInputChange}
                                        required
                                    >
                                        <option value="">Pilih Kategori</option>
                                        {categories.map(category => (
                                            <option key={category.id} value={category.id}>
                                                {category.kategori}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                                <div className="form-group">
                                    <label>Penerbit</label>
                                    <select
                                        name="penerbit_id"
                                        value={bookForm.penerbit_id}
                                        onChange={handleInputChange}
                                        required
                                    >
                                        <option value="">Pilih Penerbit</option>
                                        {publishers.map(publisher => (
                                            <option key={publisher.id} value={publisher.id}>
                                                {publisher.nama_penerbit}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                            </div>
                            <div className="form-row">
                                <div className="form-group">
                                    <label>Tahun Terbit</label>
                                    <input
                                        type="number"
                                        name="tahun_terbit"
                                        value={bookForm.tahun_terbit}
                                        onChange={handleInputChange}
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label>Jumlah Halaman</label>
                                    <input
                                        type="number"
                                        name="jumlah_halaman"
                                        value={bookForm.jumlah_halaman}
                                        onChange={handleInputChange}
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label>Stok Buku</label>
                                    <input
                                        type="number"
                                        name="jumlah_buku"
                                        value={bookForm.jumlah_buku}
                                        onChange={handleInputChange}
                                        required
                                    />
                                </div>
                            </div>
                            <div className="form-actions">
                                <button type="button" className="cancel-btn" onClick={() => setShowEditModal(false)}>
                                    Batal
                                </button>
                                <button type="submit" className="submit-btn">
                                    Update Buku
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
};

export default AdminBooks;
